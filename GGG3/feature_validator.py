import numpy as np
from typing import List, Dict, Tuple
from scipy.stats import pearsonr

def analyze_feature_correlation(X: np.ndarray, y: np.ndarray, 
                                feature_names: List[str] = None,
                                top_n: int = 20) -> Dict[str, float]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Ñ–∏—á–µ–π —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
    
    Args:
        X: –º–∞—Ç—Ä–∏—Ü–∞ —Ñ–∏—á–µ–π [n_samples, n_features]
        y: —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è [n_samples]
        feature_names: –∏–º–µ–Ω–∞ —Ñ–∏—á–µ–π
        top_n: —Å–∫–æ–ª—å–∫–æ —Ç–æ–ø —Ñ–∏—á–µ–π –ø–æ–∫–∞–∑–∞—Ç—å
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å {–∏–º—è_—Ñ–∏—á–∏: –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è}
    """
    if feature_names is None:
        feature_names = [f"feature_{i}" for i in range(X.shape[1])]
    
    correlations = {}
    
    print("\n" + "="*60)
    print("üìä –ê–ù–ê–õ–ò–ó –ö–û–†–†–ï–õ–Ø–¶–ò–ò –§–ò–ß–ï–ô –° –¶–ï–õ–ï–í–û–ô –ü–ï–†–ï–ú–ï–ù–ù–û–ô")
    print("="*60)
    
    for i, name in enumerate(feature_names):
        try:
            corr, p_value = pearsonr(X[:, i], y)
            correlations[name] = corr
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –¥–ª—è {name}: {e}")
            correlations[name] = 0.0
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    sorted_features = sorted(correlations.items(), 
                            key=lambda x: abs(x[1]), 
                            reverse=True)
    
    print(f"\nüîù TOP-{min(top_n, len(sorted_features))} –§–ò–ß–ï–ô –ü–û –ö–û–†–†–ï–õ–Ø–¶–ò–ò:\n")
    for idx, (name, corr) in enumerate(sorted_features[:top_n], 1):
        indicator = "‚úÖ" if abs(corr) > 0.05 else "‚ö†Ô∏è"
        print(f"{idx:2d}. {indicator} {name:40s} corr={corr:+.4f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    strong_corr = sum(1 for c in correlations.values() if abs(c) > 0.05)
    weak_corr = sum(1 for c in correlations.values() if abs(c) <= 0.01)
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –°–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (|r| > 0.05): {strong_corr}/{len(correlations)}")
    print(f"   –°–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (|r| ‚â§ 0.01):  {weak_corr}/{len(correlations)}")
    
    if weak_corr > len(correlations) * 0.5:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ë–æ–ª–µ–µ 50% —Ñ–∏—á–µ–π –∏–º–µ—é—Ç –æ—á–µ–Ω—å —Å–ª–∞–±—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å feature engineering.")
    
    return correlations


def check_data_leakage(X: np.ndarray, feature_names: List[str] = None) -> List[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏—á–∏ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —É—Ç–µ—á–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—É–¥—É—â–µ–≥–æ.
    
    –ü—Ä–∏–∑–Ω–∞–∫–∏ data leakage:
    - –§–∏—á–∏ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    - –§–∏—á–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '_future', '_next', '_t+1' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏—á–µ–π
    """
    if feature_names is None:
        feature_names = [f"feature_{i}" for i in range(X.shape[1])]
    
    suspicious = []
    
    print("\n" + "="*60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ù–ê DATA LEAKAGE")
    print("="*60 + "\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π
    leak_keywords = ['future', 'next', 't+1', 'forward', 'ahead']
    for name in feature_names:
        name_lower = name.lower()
        if any(keyword in name_lower for keyword in leak_keywords):
            suspicious.append(name)
            print(f"‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–¥–µ–∞–ª—å–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—â–∏–µ —Ñ–∏—á–∏ (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è ~1.0)
    print("\nüí° –§–∏—á–∏ —Å –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—ã—à–µ")
    
    if suspicious:
        print(f"\n‚ùå –ù–ê–ô–î–ï–ù–û {len(suspicious)} –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –§–ò–ß–ï–ô!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —ç—Ç–∏ —Ñ–∏—á–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ.")
    else:
        print("\n‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏—á–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º.")
    
    return suspicious