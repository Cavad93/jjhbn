# -*- coding: utf-8 -*-
"""
reserve_fund.py ‚Äî —É—á—ë—Ç ¬´—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞¬ª —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π (23:00 UTC) —Ñ–∏–∫—Å–∞—Ü–∏–µ–π:
- –ï—Å–ª–∏ –∫–∞–ø–∏—Ç–∞–ª –≤—ã—Ä–æ—Å –∑–∞ —Å—É—Ç–∫–∏: 50% –ø—Ä–∏—Ä–æ—Å—Ç–∞ ‚Üí –≤ —Ä–µ–∑–µ—Ä–≤ (–∫–∞–ø–∏—Ç–∞–ª —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è).
- –ï—Å–ª–∏ –∫–∞–ø–∏—Ç–∞–ª —É–ø–∞–ª: –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º –ø–∞–¥–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—É–º–º—É.
- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ JSON (–±–∞–ª–∞–Ω—Å —Ä–µ–∑–µ—Ä–≤–∞, –∫–∞–ø–∏—Ç–∞–ª –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç—Å–µ—á–∫–µ, –≤—Ä–µ–º—è –æ—Ç—Å–µ—á–∫–∏).
- –†–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ¬´–ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ç–∏–∫–µ¬ª –ø–æ—Å–ª–µ 23:00 UTC (–∫–∞–∫ —Å–µ–π—á–∞—Å —É delta_daily).

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–≤ bnbusdrt6.py):
    from reserve_fund import ReserveFund
    reserve = ReserveFund(path=os.path.join(os.path.dirname(__file__), "reserve_state.json"))

    # –≤–Ω—É—Ç—Ä–∏ –≥–ª–∞–≤–Ω–æ–≥–æ while True, —Ä—è–¥–æ–º —Å daily-–ª–æ–≥–∏–∫–æ–π:
    event = reserve.maybe_eod_rebalance(now_ts=now, capital=capital)
    if event and event.get("changed"):
        capital = float(event["capital"])
        capital_state.save(capital, ts=now)
        try:
            tg_send(event["message"])
        except Exception:
            pass

    # –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞:
    # —Ä–µ–∑–µ—Ä–≤ —É–∂–µ –ø–æ—è–≤–∏—Ç—Å—è (–º—ã –¥–æ–±–∞–≤–∏–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –≤ build_stats_message).
"""
from __future__ import annotations
from dataclasses import dataclass, asdict
import json, os
from typing import Optional, Dict, Any
from datetime import datetime, date, time, timezone

def _utcnow() -> datetime:
    return datetime.now(tz=timezone.utc)

def _atomic_write_json(path: str, obj: Dict[str, Any]) -> None:
    tmp = path + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(obj, f, ensure_ascii=False, indent=2)
        f.flush()
        os.fsync(f.fileno())
    os.replace(tmp, path)

@dataclass
class ReserveState:
    reserve: float = 0.0
    last_checkpoint_utc: Optional[str] = None
    capital_at_checkpoint: Optional[float] = None

    @staticmethod
    def load(path: str) -> "ReserveState":
        try:
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
            return ReserveState(
                reserve=float(data.get("reserve", 0.0)),
                last_checkpoint_utc=data.get("last_checkpoint_utc"),
                capital_at_checkpoint=(float(data["capital_at_checkpoint"])
                                       if data.get("capital_at_checkpoint") is not None else None),
            )
        except FileNotFoundError:
            return ReserveState()
        except Exception:
            # –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º ¬´—Å –Ω—É–ª—è¬ª, –Ω–µ –ª–æ–º–∞—è—Å—å.
            return ReserveState()

    def save(self, path: str) -> None:
        _atomic_write_json(path, asdict(self))

class ReserveFund:
    """
    –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–Ω–µ–≤–Ω–æ–π ¬´—Ä–µ–±–∞–ª–∞–Ω—Å¬ª –≤ 23:00 UTC.
    """
    def __init__(self, path: str = "reserve_state.json", checkpoint_hour: int = 23):
        self.path = path
        self.checkpoint_hour = int(checkpoint_hour)
        self.state = ReserveState.load(self.path)

    @staticmethod
    def _anchor_for_day(d: date, hour: int) -> datetime:
        # 23:00 UTC –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è
        return datetime(d.year, d.month, d.day, hour, 0, 0, tzinfo=timezone.utc)

    @property
    def balance(self) -> float:
        return float(self.state.reserve or 0.0)

    def read_balance_fast(self) -> float:
        # –£–¥–æ–±–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è ¬´–ª–µ–Ω–∏–≤–æ–≥–æ¬ª —á—Ç–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ —á—É–∂–æ–º –∫–æ–¥–µ.
        try:
            s = ReserveState.load(self.path)
            return float(s.reserve or 0.0)
        except Exception:
            return 0.0

    def maybe_eod_rebalance(self, now_ts: int, capital: float) -> Optional[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –µ—Å–ª–∏ –º—ã –ø–µ—Ä–µ—Å–µ–∫–ª–∏ ¬´—è–∫–æ—Ä—å¬ª 23:00 UTC –∏
        —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            None ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∏;
            dict —Å –ø–æ–ª—è–º–∏:
                changed: bool
                capital: float (–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π)
                reserve: float (–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —Ä–µ–∑–µ—Ä–≤–∞)
                moved: float (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Ä–µ–∑–µ—Ä–≤ –ø—Ä–∏ –ø—Ä–æ—Ñ–∏—Ç–µ)
                covered: float (–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –ø—Ä–∏ —É–±—ã—Ç–∫–µ)
                message: str (–∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –¥–ª—è TG)
                checkpoint_utc: str (ISO –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Å–µ—á–∫–∏)
        """
        now = datetime.fromtimestamp(int(now_ts), tz=timezone.utc)
        today_anchor = self._anchor_for_day(now.date(), self.checkpoint_hour)

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –µ—â—ë –ù–ï –¥–æ—Å—Ç–∏–≥–ª–æ 23:00 UTC ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.
        if now < today_anchor:
            return None

        # –£–∂–µ –¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è?
        last_iso = self.state.last_checkpoint_utc
        if last_iso:
            try:
                last_dt = datetime.fromisoformat(last_iso)
                if last_dt >= today_anchor:
                    return None  # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è
            except Exception:
                # –∫–æ—Ä—è–≤—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî —Å–¥–µ–ª–∞–µ–º –≤–∏–¥, —á—Ç–æ –Ω–µ –±—ã–ª–æ –æ—Ç—Å–µ—á–∫–∏
                pass

        # –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ capital_at_checkpoint)
        if self.state.capital_at_checkpoint is None:
            self.state.capital_at_checkpoint = float(capital)
            self.state.last_checkpoint_utc = today_anchor.isoformat()
            self.state.reserve = float(self.state.reserve or 0.0)
            self.state.save(self.path)
            return {
                "changed": False,
                "capital": float(capital),
                "reserve": float(self.state.reserve),
                "moved": 0.0,
                "covered": 0.0,
                "message": f"üè¶ –†–µ–∑–µ—Ä–≤: –ø–µ—Ä–≤–∞—è –æ—Ç—Å–µ—á–∫–∞ {today_anchor.isoformat()} ‚Äî –±–∞–∑–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.",
                "checkpoint_utc": today_anchor.isoformat(),
            }

        prev_cap = float(self.state.capital_at_checkpoint)
        cur_cap = float(capital)
        delta = cur_cap - prev_cap

        moved = 0.0
        covered = 0.0
        changed = False
        reserve_before = float(self.state.reserve or 0.0)
        lines = [f"üè¶ –†–µ–∑–µ—Ä–≤ (–¥–Ω–µ–≤–Ω–∞—è –æ—Ç—Å–µ—á–∫–∞ 23:00 UTC)"]

        if delta > 0.0:
            moved = 0.5 * delta
            self.state.reserve = reserve_before + moved
            cur_cap = cur_cap - moved
            changed = True
            lines.append(f"–ü—Ä–æ—Ñ–∏—Ç –∑–∞ —Å—É—Ç–∫–∏: +{delta:.6f} BNB ‚Üí 50% –≤ —Ä–µ–∑–µ—Ä–≤: {moved:.6f} BNB.")
        elif delta < 0.0:
            loss = -delta
            covered = min(loss, reserve_before)
            if covered > 0.0:
                self.state.reserve = reserve_before - covered
                cur_cap = cur_cap + covered
                changed = True
                lines.append(f"–£–±—ã—Ç–æ–∫ –∑–∞ —Å—É—Ç–∫–∏: -{loss:.6f} BNB ‚Üí –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞: {covered:.6f} BNB.")
            else:
                lines.append(f"–£–±—ã—Ç–æ–∫ –∑–∞ —Å—É—Ç–∫–∏: -{loss:.6f} BNB; —Ä–µ–∑–µ—Ä–≤ –ø—É—Å—Ç ‚Äî –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –Ω–µ—Ç.")
        else:
            lines.append("–ó–∞ —Å—É—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        self.state.capital_at_checkpoint = float(cur_cap)  # –Ω–æ–≤–∞—è –±–∞–∑–∞ = –ü–û–°–õ–ï –ø–µ—Ä–µ–≤–æ–¥–∞/–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        self.state.last_checkpoint_utc = today_anchor.isoformat()
        self.state.save(self.path)

        lines.append(f"–ë–∞–ª–∞–Ω—Å —Ä–µ–∑–µ—Ä–≤–∞: {self.state.reserve:.6f} BNB. –†–∞–±–æ—á–∏–π –∫–∞–ø–∏—Ç–∞–ª: {cur_cap:.6f} BNB.")
        return {
            "changed": changed,
            "capital": float(cur_cap),
            "reserve": float(self.state.reserve),
            "moved": float(moved),
            "covered": float(covered),
            "message": "\n".join(lines),
            "checkpoint_utc": today_anchor.isoformat(),
        }
