
# -*- coding: utf-8 -*-
"""
wr_pnl_tracker.py ‚Äî —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ç—Ä–µ–∫–µ—Ä WR/PNL + –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ "–æ—Ç–¥—ã—Ö–∞".
–ê–≤—Ç–æ—Ä: ChatGPT

–ö–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏:
- –í—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ–º —Å UTC-–≤—Ä–µ–º–µ–Ω–µ–º. "–°—É—Ç–∫–∏/7–¥/30–¥" = —Å–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞ –ø–æ UTC, –∞ –Ω–µ "–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –¥–µ–Ω—å".
- –ß–∏—Ç–∞–µ–º trades_prediction.csv, –î–ï–î–£–ü–õ–ò–ö–ò–†–£–ï–ú –ø–æ —Å—Ç–æ–ª–±—Ü—É epoch, –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫–∏ —Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏—Å—Ö–æ–¥–æ–º.
- WR_Œî24h —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–≤—É–º—è –ù–ï–ü–ï–†–ï–ö–†–´–í–ê–Æ–©–ò–ú–ò–°–Ø –æ–∫–Ω–∞–º–∏: (48..24—á –Ω–∞–∑–∞–¥) vs (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á).
- –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–¥—ã—Ö–∞ (REST4H/REST24H/ACTIVE) –∏ –≤—Ä–µ–º—è rest_until_utc —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON.
- –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ REST4H, –ø–æ–∫–∞ –Ω–µ —Å–ª—É—á–∏—Ç—Å—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ –≤ ACTIVE –∏ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –º–∏–Ω–∏–º—É–º —Å–¥–µ–ª–æ–∫/–≤—Ä–µ–º–µ–Ω–∏.
- –ó–∞—â–∏—Ç–∞ –æ—Ç "—à—Ç–æ—Ä–º–æ–≤" –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ü–ö: –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º CSV –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –≤–∞—à –∫–æ–¥:
1) from wr_pnl_tracker import StatsTracker, RestState, RestConfig
2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ):
       stats = StatsTracker(csv_path="GGG/trades_prediction.csv")
       rest = RestState.load(path="GGG/rest_state.json")
3) –ü–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å—Ç–∞–≤–∫–æ–π –ø—Ä–æ–≤–µ—Ä—è—Ç—å:
       if not rest.can_trade_now():
           log("REST until", rest.rest_until_utc)
           return  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–≤–∫—É
4) –ü–æ—Å–ª–µ –ö–ê–ñ–î–û–ì–û –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –≤ CSV):
       stats.reload()
       rest.update_from_stats(stats)
       rest.save()

–ü–æ –∂–µ–ª–∞–Ω–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑—É–π—Ç–µ –ø–æ—Ä–æ–≥–∏ –≤ RestConfig(...).
"""
from __future__ import annotations
import json, os
from dataclasses import dataclass, asdict
from typing import Optional, Literal
from datetime import datetime, timedelta, timezone
import pandas as pd
import numpy as np

StateName = Literal["ACTIVE", "REST4H", "REST24H"]

def utcnow() -> datetime:
    return datetime.now(timezone.utc)

@dataclass
class RestConfig:
    min_interval_between_rests: timedelta = timedelta(hours=24)
    last_rest_start_utc: Optional[str] = None  # ISO8601, –∫–æ–≥–¥–∞ –º—ã –≤–æ—à–ª–∏ –≤ REST –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑
   # –ü–æ—Ä–æ–≥–∏ –ø–∞–¥–µ–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞ (–≤ –ü–†–û–¶–ï–ù–¢–ù–´–• –ü–£–ù–ö–¢–ê–•, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.10 = -10 –ø.–ø.)
    drop_for_rest4h: float = 0.10
    drop_for_rest24h: float = 0.15
    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
    dur_rest4h: timedelta = timedelta(hours=4)
    dur_rest24h: timedelta = timedelta(hours=24)
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –≤ –∫–∞–∂–¥–æ–º 24h-–æ–∫–Ω–µ, —á—Ç–æ–±—ã —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å –æ—Ç–¥—ã—Ö
    min_trades_per_window: int = 40
    # –ì–∏—Å—Ç–µ—Ä–µ–∑–∏—Å: –ø–æ—Å–ª–µ REST4H —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã N —Å–¥–µ–ª–æ–∫,
    # –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–Ω–æ–≤–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Ö–æ–¥ –≤ –ª—é–±–æ–π REST
    min_trades_after_rest4h: int = 10
    # –õ–∏–±–æ –º–∏–Ω–∏–º—É–º –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ —Å–¥–µ–ª–æ–∫ –º–∞–ª–æ
    min_time_after_rest4h: timedelta = timedelta(hours=2)
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–¥–≤—É—Ö–æ–∫–æ–Ω–Ω—É—é" –æ—Ü–µ–Ω–∫—É WR_Œî24h (48..24h vs 24..0h)
    use_two_window_drop: bool = True
    # üö´ –ò–º–º—É–Ω–∏—Ç–µ—Ç –æ—Ç –æ—Ç–¥—ã—Ö–∞ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    # (–ø–æ—Å–ª–µ –¥–µ–¥—É–ø–∞ –ø–æ epoch –∏ —Ç–æ–ª—å–∫–æ —Å outcome)
    min_total_trades_for_rest: int = 500

@dataclass
class RestState:
    state: StateName = "ACTIVE"
    rest_until_utc: Optional[str] = None            # ISO8601 –≤ UTC
    last_exit_to_active_utc: Optional[str] = None   # ISO8601 –≤ UTC
    last_rest_start_utc: Optional[str] = None       # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û
    trades_since_last_rest4h_exit: int = 0
    decided_at_utc: Optional[str] = None            # —Å–ª—É–∂–µ–±–Ω–æ–µ: –∫–æ–≥–¥–∞ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —Ä–µ—à–µ–Ω–∏–µ

    @staticmethod
    def load(path: str) -> "RestState":
        try:
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
            return RestState(**data)
        except FileNotFoundError:
            return RestState()
        except Exception as e:
            # –ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π —Ñ–∞–π–ª? –°—Ç–∞—Ä—Ç—É–µ–º –≤ ACTIVE, –Ω–æ –Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–¥—ã—Ö.
            return RestState()

    def save(self, path: str = "rest_state.json") -> None:
        tmp = path + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(asdict(self), f, ensure_ascii=False, indent=2)
            f.flush()
            os.fsync(f.fileno())
        os.replace(tmp, path)

    def _parse_dt(self, s: Optional[str]) -> Optional[datetime]:
        if not s:
            return None
        return datetime.fromisoformat(s)

    def _set_until(self, dt_until: datetime) -> None:
        self.rest_until_utc = dt_until.isoformat()
        now_iso = utcnow().isoformat()
        self.decided_at_utc      = now_iso
        self.last_rest_start_utc = now_iso


    def can_trade_now(self) -> bool:
        """TRUE –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å (–º—ã –Ω–µ –≤ REST –∏–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ)."""
        if self.state == "ACTIVE":
            return True
        until = self._parse_dt(self.rest_until_utc)
        if not until:
            # –±–µ–∑–æ–ø–∞—Å–Ω–æ: –µ—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –Ω–µ —Ç–æ—Ä–≥—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —Ç–∏–∫
            return False
        if utcnow() >= until:
            # –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ—Ç–¥—ã—Ö–∞.
            self.state = "ACTIVE"
            self.last_exit_to_active_utc = utcnow().isoformat()
            self.trades_since_last_rest4h_exit = 0
            return True
        return False

    def notify_trade_executed(self) -> None:
        """–í—ã–∑—ã–≤–∞–π—Ç–µ –ö–ê–ñ–î–´–ô —Ä–∞–∑, –∫–æ–≥–¥–∞ —Å–¥–µ–ª–∫–∞ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–∫—Ä—ã–ª–∞—Å—å (–ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –≤ CSV)."""
        if self.state == "ACTIVE":
            if self.last_exit_to_active_utc:
                self.trades_since_last_rest4h_exit += 1

    def update_from_stats(self, stats: "StatsTracker", cfg: RestConfig = RestConfig()) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–µ–∂–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        now = utcnow()

        # üö´ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–º–º—É–Ω–∏—Ç–µ—Ç: –¥–æ N_total –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ ‚Äî –ù–ò–ö–ê–ö–û–ì–û –æ—Ç–¥—ã—Ö–∞.
        # –ë–µ—Ä—ë–º —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –¥–µ–¥—É–ø–∞ –∏ —Ç–æ–ª—å–∫–æ —Å outcome.
        try:
            n_total = int(getattr(stats, "df", None).shape[0])  # type: ignore[attr-defined]
        except Exception:
            n_total = 0

        if n_total < getattr(cfg, "min_total_trades_for_rest", 0):
            # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —É–∂–µ –≤ REST ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º –≤ ACTIVE
            if self.state in ("REST4H", "REST24H"):
                self.state = "ACTIVE"
                self.rest_until_utc = None
                self.last_exit_to_active_utc = now.isoformat()
                self.trades_since_last_rest4h_exit = 0
            self.decided_at_utc = now.isoformat()
            return

        # üö´ –ß–∞—Å—Ç–æ—Ç–∞: –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –∑–∞ min_interval_between_rests
        if self.state == "ACTIVE":
            last_start = self._parse_dt(self.last_rest_start_utc)
            if last_start and (utcnow() - last_start) < cfg.min_interval_between_rests:
                # –†–∞–Ω–æ —Å–Ω–æ–≤–∞ –≤—Ö–æ–¥–∏—Ç—å –≤ REST ‚Äî –∂–¥—ë–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—É—Ç–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                return


        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –æ—Ç–¥—ã—Ö –∏ –≤—Ä–µ–º—è –Ω–µ –≤—ã—à–ª–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ.
        if self.state in ("REST4H", "REST24H"):
            until = self._parse_dt(self.rest_until_utc)
            if until and now < until:
                return
            else:
                pass


        # –ì–∏—Å—Ç–µ—Ä–µ–∑–∏—Å –ø–æ—Å–ª–µ REST4H: –Ω–µ –¥–∞—ë–º —Ç—É—Ç –∂–µ —Å–Ω–æ–≤–∞ –≤–ª–µ—Ç–µ—Ç—å –≤ –æ—Ç–¥—ã—Ö
        if self.last_exit_to_active_utc:
            elapsed = now - datetime.fromisoformat(self.last_exit_to_active_utc)
            if (self.trades_since_last_rest4h_exit < cfg.min_trades_after_rest4h) and (elapsed < cfg.min_time_after_rest4h):
                return  # —Ä–∞–Ω–æ —Å—É–¥–∏—Ç—å, –¥–∞–π—Ç–µ –º–æ–¥–µ–ª–∏ "–≤–¥–æ—Ö–Ω—É—Ç—å"

        drop, n_old, n_new = (
            stats.wr_drop_24h_two_windows() 
            if getattr(cfg, "use_two_window_drop", True) 
            else stats.wr_drop_24h_single_baseline()
        )


        # –ù–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º, –µ—Å–ª–∏ –≤—ã–±–æ—Ä–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã
        if (n_old < cfg.min_trades_per_window) or (n_new < cfg.min_trades_per_window) or (drop is None):
            return

        # –≠—Å–∫–∞–ª–∞—Ü–∏–∏/—Ä–µ—à–µ–Ω–∏—è
        if drop >= cfg.drop_for_rest24h:
            self.state = "REST24H"
            self._set_until(now + cfg.dur_rest24h)
        elif drop >= cfg.drop_for_rest4h:
            # –í REST4H –≤—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ ACTIVE —Å–µ–π—á–∞—Å
            if self.state == "ACTIVE":
                self.state = "REST4H"
                self._set_until(now + cfg.dur_rest4h)
        # –ò–Ω–∞—á–µ ‚Äî –æ—Å—Ç–∞—ë–º—Å—è ACTIVE

class StatsTracker:
    def __init__(self, csv_path: str = "GGG/trades_prediction.csv"):
        self.csv_path = csv_path
        self.df = None
        self.reload()

    def reload(self) -> None:
        df = pd.read_csv(self.csv_path)
        # –¢—Ä–µ–±—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required = ["settled_ts", "epoch", "outcome", "pnl"]
        missing = [c for c in required if c not in df.columns]
        if missing:
            raise RuntimeError(f"–í CSV –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: {missing}")
        # UTC-–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        df["_ts"] = pd.to_datetime(df["settled_ts"], unit="s", utc=True, errors="coerce")
        # –¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (outcome –∑–∞–ø–æ–ª–Ω–µ–Ω)
        mask_done = df["outcome"].astype(str).str.len() > 0
        df = df.loc[mask_done].copy()
        # –î–µ–¥—É–ø –ø–æ epoch (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏)
        df.sort_values(by=["epoch", "_ts"], inplace=True)
        df = df.drop_duplicates(subset=["epoch"], keep="last")
        # –£–¥–æ–±–Ω—ã–µ –ø–æ–ª—è
        df["_win"] = df["outcome"].astype(str).str.lower().isin(["win", "won", "true", "1"])
        df["_pnl"] = pd.to_numeric(df["pnl"], errors="coerce").fillna(0.0)
        self.df = df

    def _window(self, end_utc: Optional[datetime], days: int):
        if end_utc is None:
            end_utc = utcnow()
        start_utc = end_utc - timedelta(days=days)
        sub = self.df[(self.df["_ts"] >= start_utc) & (self.df["_ts"] < end_utc)]
        n = int(len(sub))
        wr = float(sub["_win"].mean()) if n else None
        pnl = float(sub["_pnl"].sum()) if n else None
        return n, wr, pnl

    def stats_24h(self):
        return self._window(utcnow(), 1)

    def stats_7d(self):
        return self._window(utcnow(), 7)

    def stats_30d(self):
        return self._window(utcnow(), 30)

    def wr_drop_24h_two_windows(self):
        """–í–µ—Ä–Ω—ë—Ç (drop, n_old, n_new), –≥–¥–µ drop = WR(48..24h) - WR(24..0h)."""
        end = utcnow()
        n_new, wr_new, _ = self._window(end, 1)  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24h
        n_old, wr_old, _ = self._window(end - timedelta(days=1), 1)  # 48..24h
        if (wr_old is None) or (wr_new is None):
            return None, n_old, n_new
        return float(wr_old - wr_new), n_old, n_new

    def wr_drop_24h_single_baseline(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Å—Ä–∞–≤–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ 24h —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–∫–æ–ª—å–∑—è—â–∏–º baseline –∑–∞ 7–¥."""
        n_new, wr_new, _ = self.stats_24h()
        n_base, wr_base, _ = self.stats_7d()
        if (wr_new is None) or (wr_base is None):
            return None, n_base, n_new
        return float(wr_base - wr_new), n_base, n_new
